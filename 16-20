16. declare
a number;
begin
a:=counter();
dbms_output.put_line(a);
end;
CREATE OR REPLACE FUNCTION get_worker_name(p_worker_id IN NUMBER)
RETURN VARCHAR2
IS
v_worker_name VARCHAR2(100);
BEGIN
SELECT worker_name
INTO v_worker_name
FROM workers
WHERE worker_id = p_worker_id;
RETURN v_worker_name;
end;

17. DECLARE
worker_name VARCHAR2(100);
BEGIN
worker_name := get_worker_name(123);
DBMS_OUTPUT.PUT_LINE('Worker name: ' || worker_name);
END;
CREATE OR REPLACE FUNCTION count_items(
p_weight IN NUMBER,
p_color IN VARCHAR2
)
RETURN NUMBER
IS
v_item_count NUMBER := 0;
BEGIN
SELECT COUNT(*)
INTO v_item_count
FROM items
WHERE weight = p_weight
AND UPPER(color) = UPPER(p_color);
RETURN v_item_count;
EXCEPTION
WHEN OTHERS THEN
RETURN -1;
END;

18. DECLARE
item_count NUMBER;
BEGIN
item_count := count_items(5.5, 'Red');
DBMS_OUTPUT.PUT_LINE('Red items weighing exactly 5.5: ' || item_count);
item_count := count_items(5.0, 10.0, 'Blue');
DBMS_OUTPUT.PUT_LINE('Blue items weighing 5.0-10.0: ' || item_count);
END;
CREATE OR REPLACE PROCEDURE count_students_by_city(
p_city IN VARCHAR2,
p_count OUT NUMBER
)
IS
BEGIN
SELECT COUNT(*)
INTO p_count
FROM students
WHERE UPPER(city) = UPPER(p_city);
DBMS_OUTPUT.PUT_LINE('Number of students in ' || p_city || ': ' || p_count);
END;

19. DECLARE
student_count NUMBER;
BEGIN
count_students_by_city('New York', student_count);
DBMS_OUTPUT.PUT_LINE('Returned count: ' || student_count);
END;
CREATE OR REPLACE PROCEDURE get_account_od_balance(
p_account_number IN VARCHAR2,
p_balance OUT NUMBER,
p_od_limit OUT NUMBER,
p_status OUT VARCHAR2
)
IS
v_count NUMBER;
BEGIN
p_balance := 0;
p_od_limit := 0;
p_status := 'SUCCESS';
SELECT balance, od_limit
INTO p_balance, p_od_limit
FROM bank
WHERE account_number = p_account_number;
DBMS_OUTPUT.PUT_LINE('Account Number: ' || p_account_number);
DBMS_OUTPUT.PUT_LINE('Current Balance: ' || TO_CHAR(p_balance, '999,999,990.99'));
DBMS_OUTPUT.PUT_LINE('OD Limit: ' || TO_CHAR(p_od_limit, '999,999,990.99'));
DBMS_OUTPUT.PUT_LINE('Available Credit: ' || TO_CHAR(p_balance + p_od_limit,
'999,999,990.99'));
IF p_balance < 0 THEN
IF ABS(p_balance) > p_od_limit THEN
DBMS_OUTPUT.PUT_LINE('WARNING: Account exceeded OD limit!');
ELSE
DBMS_OUTPUT.PUT_LINE('Account is using overdraft facility.');
END IF;
ELSE
DBMS_OUTPUT.PUT_LINE('Account has positive balance.');
END IF;
END;

20. DECLARE
v_balance NUMBER;
v_od_limit NUMBER;
v_status VARCHAR2(50);
BEGIN
DBMS_OUTPUT.PUT_LINE('=== Example 1: Valid Account ===');
get_account_od_balance('ACC001', v_balance, v_od_limit, v_status);
DBMS_OUTPUT.PUT_LINE('Status: ' || v_status);
DBMS_OUTPUT.PUT_LINE('');
END;
CREATE OR REPLACE TRIGGER salary_update_trigger
BEFORE UPDATE OF salary ON employees
FOR EACH ROW
BEGIN
IF :OLD.role NOT IN ('MANAGER', 'GM') THEN
RAISE_APPLICATION_ERROR(-20001, 'Only MANAGER or GM can update salary');
END IF;
END;
UPDATE employees SET salary = 45000 WHERE employee_id = 3;
